version: "3.8"
networks:
    app-network:
        driver: bridge
  
services:
    poggers-sql:
        image: postgres:14.1-alpine
        restart: always
        env_file:
            - .env
        ports:
            - '${POSTGRES_PORT}:${POSTGRES_PORT}'
        volumes: 
            - poggers-sql-data:/var/lib/postgresql/data
        hostname: "${POSTGRES_HOSTNAME}"
    pgadmin:
        image: dpage/pgadmin4
        container_name: pg-admin
        env_file:
            - .env
        restart: always
        ports:
            - "${PGADMIN_PORT}:80"
        volumes:
            - pgadmin-data:/var/lib/pgadmin 
        hostname: "${PGADMIN_HOST_NAME}"
        logging:
            driver: none
        depends_on:
            - poggers-sql
    load-balancer:
        image: haproxy:2.3
        restart: always
        env_file:
            - .env
        ports:
            - "${LOAD_BALANCER_PORT}:${LOAD_BALANCER_PORT}"
        volumes:
            - ./haproxy:/usr/local/etc/haproxy
        deploy:
            resources:
                limits:
                    memory: 500M
        container_name: Haproxy-LOAD-BALANCER
    rabbitmq3:
        container_name: "kroliczek"
        image: rabbitmq:3.8-management-alpine
        env_file:
            - .env
        ports:
            - '${BUNNY_CONNECTION_PORT}:${BUNNY_CONNECTION_PORT}'
            - '15672:15672'
        hostname: ${BUNNY_HOSTNAME}
        depends_on:
            - load-balancer
    nest-main-server:
        container_name: main-server
        image: dockerfiles/main-server/dockerfile
        hostname: "${MAIN_SERVER_HOSTNAME}"
        restart: on-failure:3
        env_file: 
            - .env
            - dockerfiles/main-server/.env
        build:
            context: ../
            dockerfile: docker/dockerfiles/main-server/dockerfile
        volumes:
            - "../server/main-server/src:/server/main-server/src"
        depends_on:
            - load-balancer
            - poggers-sql
    auth-service:
        container_name: auth-service
        image: dockerfiles/auth-service/dockerfile
        hostname: "${AUTH_SERVICE_HOSTNAME}"
        restart: on-failure:3
        env_file: 
            - dockerfiles/auth-service/.env
            - .env
        build:
            context: ../
            dockerfile: docker/dockerfiles/auth-service/dockerfile
        volumes:
            - "../server/auth-service/src:/server/auth-service/src"
            - "../server/common:/server/common"

        depends_on:
            - rabbitmq3
            - poggers-sql
    users-service:
            container_name: users-service
            image: dockerfiles/users-service/dockerfile
            hostname: "${USER_SERVER_HOSTNAME}"
            restart: on-failure:3
            ports:
                - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
            env_file: 
                - .env
                - dockerfiles/users-service/.env
            build:
                context: ../
                dockerfile: docker/dockerfiles/users-service/dockerfile
            volumes:
                - "../server/users-service/src:/server/users-service/src"
                - "../server/common:/server/common"
            depends_on:
                - load-balancer
                - poggers-sql

volumes:
    poggers-sql-data:
    pgadmin-data:

